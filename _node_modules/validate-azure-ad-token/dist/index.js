"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const is_string_1 = require("./core/is-string");
const decode_access_token_1 = require("./core/decode-access-token");
const validate_token_header_1 = require("./core/validate-token-header");
const validate_token_claims_1 = require("./core/validate-token-claims");
/**
 * Validate azure active directory access token
 *
 * @param accessToken - valid access token received from azure
 * @param validationOptions - the interface represents required fields to process access token validation
 *
 * @public
 */
async function validate(accessToken, { applicationId, audience, scopes, tenantId }) {
    if (Array.isArray(scopes) && scopes.length === 0) {
        throw new Error('"scopes" array cannot be empty');
    }
    if (typeof audience !== 'string' || audience.length === 0) {
        throw new Error('"audience" value was not provided');
    }
    if (typeof tenantId !== 'string' || tenantId.length === 0) {
        throw new Error('"tenantId" value was not provided');
    }
    if (typeof applicationId !== 'string' || applicationId.length === 0) {
        throw new Error('"applicationId" value was not provided');
    }
    const decodedAccessToken = (0, decode_access_token_1.decodeAccessToken)(accessToken);
    if (!decodedAccessToken) {
        throw new Error('The access token could not be decoded');
    }
    if ((0, is_string_1.isString)(decodedAccessToken.payload)) {
        throw new Error('The access token payload is not an object');
    }
    await (0, validate_token_header_1.validateTokenHeader)(decodedAccessToken.header, tenantId, applicationId);
    (0, validate_token_claims_1.validateTokenClaims)(decodedAccessToken.payload, {
        scopes,
        audience,
        tenantId,
        applicationId,
    });
    return decodedAccessToken;
}
exports.default = validate;
